{"meta":{"title":"iPhreetom","subtitle":"追逐阳光与希望","description":"ACMer·Bigdate·Html·Painter","author":"iPhreetom","url":"http://iPhreetom.com"},"pages":[{"title":"categories","date":"2018-01-17T16:36:49.000Z","updated":"2018-01-17T16:40:41.377Z","comments":true,"path":"categories/index.html","permalink":"http://iPhreetom.com/categories/index.html","excerpt":"","text":""},{"title":"奔跑","date":"2018-01-17T16:23:26.000Z","updated":"2018-01-30T06:59:09.772Z","comments":true,"path":"about/index.html","permalink":"http://iPhreetom.com/about/index.html","excerpt":"","text":"“少年，为什么要奔跑？”&emsp;&emsp;&emsp;&emsp;“为了追逐太阳。”"},{"title":"tags","date":"2018-01-17T16:36:23.000Z","updated":"2018-01-17T16:40:04.283Z","comments":true,"path":"tags/index.html","permalink":"http://iPhreetom.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"为梦而行","slug":"为梦而行","date":"2018-02-08T22:32:53.000Z","updated":"2018-02-09T00:19:15.132Z","comments":true,"path":"2018/02/09/为梦而行/","link":"","permalink":"http://iPhreetom.com/2018/02/09/为梦而行/","excerpt":"","text":"为梦而行很久，没有做过这样的梦了…… 在梦中，父母与我写下又一段故事 随着剧终的到来，胸口未名的感情，把我拉醒 在开始住宿的高一，每日都会做着的梦 每次做完这种梦……都会想着要好好学习呢（笑 那么，在梦境未消散之日，在自己决定的道路上继续前行吧。","categories":[{"name":"iPhreetom's world","slug":"iPhreetom-s-world","permalink":"http://iPhreetom.com/categories/iPhreetom-s-world/"}],"tags":[{"name":"think","slug":"think","permalink":"http://iPhreetom.com/tags/think/"}]},{"title":"效率主义","slug":"效率主义","date":"2018-02-05T22:32:53.000Z","updated":"2018-02-06T09:53:12.046Z","comments":true,"path":"2018/02/06/效率主义/","link":"","permalink":"http://iPhreetom.com/2018/02/06/效率主义/","excerpt":"","text":"效率主义我所拥有的现在，与我想要到达的未来： 自己买一个2300的画板时发现……名叫iPhreetom的家伙已经独立了 以后想要过什么样的生活，都是由自己决定的 自己能够做什么样的事情，由现在来决定 在WF上一展风采 在欧洲游历 在漫画书上连载自己的漫画 出版自己的小说 在搜索引擎上留下自己的名字 …… 作为iPhreetom，需要更高的效率，来完成现在他想做之事：学习，画画，算法比赛，算法学习，大数据和论文 在这个寒假，我需改带给自己巨大的改变。 我需要在这里把学习完成，以至于下个学期可以获得更多的自由（效率），并且获得我能够得到的最多的分数。 接着我需要在这里学习更多算法知识，并且在最后参加几场训练赛，在下个学期的比赛中和Dim在北邮比赛一场，并且在校赛取得优异成绩，正式进入校队。 而大数据和论文，则是，我向学姐学长们学习，试着在本科学会用写论文的方式，研究自己感兴趣的东西。并且超前获得认可。 一天的时间就这么多，来吧，决定现在做什么是最有效率的。 因为要做的事情很多，所以才会拼命的提高效率，争取自己梦中之物。 今天所得论文： 得到：与世界交互的方式，在研究生阶段获得评价的方式，增加就业竞争力 付出：重点在于多看优秀的论文，由此对领域有所了解（由省级论文到SCI的论文等级） 目标：了解如何能够做出一篇能够发表的论文写作方法（写作） 先学习写出论文框架，并且把简介与描述写出来 写了这些可以为你增添信心 这一部分还可以直接影响文章的B格，导致被审查时的xxxx 看《语言的风格》 找native speaker修改你的文章 看论文方法 论文分类：对我直接有用的，可能会拓宽我的研究领域的，可能会启发我写作的。 看论文的方法：通过关键词跳读 研究领域选择满足我个人兴趣和获得社会评价 （个人版）寻找社会需求，或者社会问题，由此进行研究（可以在知乎实践小论文的写作） （实用版）去实验室跟着老师做实验，系统学习该方面 （进阶版）社会评价的体系下，寻找期刊，并且参考期考近期的研究领域——去找论文看 在校生获取论文的方法： （可选）关注该领域杂志和新闻 研究方法 写点code 分析一下data Anaconda python 发行版 包含了python几乎所有的图形库，用来做数据可视化很不错 机器学习简单了解通过斯坦福大学的《机器学习》入门 通过斯坦福大学《线性代数》重新理解，线性代数 学习方法：一般来说，多看，多练，就是学习的通法 学习算法，要求看的算法多，同时要求，解题的能力强，对于一个题，结合多种算法，解决它 基础是C++ 学写论文，要求看的优秀论文多，同时要求，做实验的能力强 基础是python科学计算库 学习微积分，要求书中的例题见得多，同时要求，解题的能力强 写你的题目去啦 学习物理，要求看懂书中知识点，和书上例题，同时要求，解题能力强 学习英语，要求能够读懂文章（多读），并且能够听懂听力（多听）（能够听得懂的范围）（英语课程，英语字幕视频，美剧） “喜欢你的时候，你的一举一动都是有意义的”","categories":[{"name":"iPhreetom's world","slug":"iPhreetom-s-world","permalink":"http://iPhreetom.com/categories/iPhreetom-s-world/"}],"tags":[{"name":"think","slug":"think","permalink":"http://iPhreetom.com/tags/think/"}]},{"title":"属于Spark的一日","slug":"属于Spark的一日","date":"2018-01-26T15:56:01.000Z","updated":"2018-01-30T07:15:23.877Z","comments":true,"path":"2018/01/26/属于Spark的一日/","link":"","permalink":"http://iPhreetom.com/2018/01/26/属于Spark的一日/","excerpt":"Spark 你好，工作能力，你好","text":"Spark 你好，工作能力，你好 Ubantu下环境搭建&emsp;&emsp;安装JAVA ， 添加环境变量&emsp;&emsp;安装scala&emsp;&emsp;安装IDE&emsp;&emsp;安装Git 分布式模拟&emsp;&emsp;Ubantu的安装包&emsp;&emsp;安装多台linux本地模拟分布式 遇到的困难以及解决方案:&emsp;&emsp;linux下软件安装&emsp;&emsp;&emsp;&emsp;npm&emsp;&emsp;&emsp;&emsp;强行bashrc&emsp;&emsp;打开bashrc配置环境&emsp;&emsp;&emsp;&emsp;使用自带的gedit编辑器&emsp;&emsp;&emsp;&emsp;gedit ~/.bashrc&emsp;&emsp;然而并不能成功安装 使用onenote&emsp;&emsp;自动开头大写的困扰&emsp;&emsp;&emsp;&emsp;设置中取消&emsp;&emsp;纠正拼写的困扰&emsp;&emsp;&emsp;&emsp;设置中取消 Windows 下安装scala与spark安装Cygwin模拟linux环境&emsp;&emsp;遇到的问题：&emsp;&emsp;&emsp;&emsp;桌面的图标没法正确打开&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;解决：改变了图标的定位&emsp;&emsp;&emsp;&emsp;ssh-host-config -y不能正确使用&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;PDF中的的-y前少了空格&emsp;&emsp;&emsp;&emsp;ssh-host-config-y不能正确安装&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;使用管理员身份打开&emsp;&emsp;&emsp;&emsp;ssh版本查看失败&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;PDF疯狂吃空格 寻找JAVA之旅&emsp;&emsp;遇到的问题：&emsp;&emsp;&emsp;&emsp;因为JAVA是许久前安装的，所以不知道具体的位置，通过网络上的配置图片，发现，在program目录下，遂寻得&emsp;&emsp;想法：&emsp;&emsp;&emsp;&emsp;以后直接在根目录下搜索JAVA即可&emsp;&emsp;&emsp;&emsp;或者搜索JAVA/bin 安装spark之旅&emsp;&emsp;遇到的问题：&emsp;&emsp;&emsp;&emsp;安装网络上的教程走了不少弯路，他们的教程都比较老旧，和新版本安装包下的文件结构不同&emsp;&emsp;解决方案：&emsp;&emsp;&emsp;&emsp;找到最直接的目的“安装spark”解决了疑惑，通过直接运行spark-shell.cmd完成了spark的安装 下午：《二十岁》人们来回奔走的人生","categories":[{"name":"IT","slug":"IT","permalink":"http://iPhreetom.com/categories/IT/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"http://iPhreetom.com/tags/大数据/"},{"name":"工作","slug":"工作","permalink":"http://iPhreetom.com/tags/工作/"},{"name":"未来道路","slug":"未来道路","permalink":"http://iPhreetom.com/tags/未来道路/"}]},{"title":"结语与开端","slug":"结语与开端","date":"2018-01-26T15:56:01.000Z","updated":"2018-01-28T02:30:44.590Z","comments":true,"path":"2018/01/26/结语与开端/","link":"","permalink":"http://iPhreetom.com/2018/01/26/结语与开端/","excerpt":"追寻智慧与自由","text":"追寻智慧与自由 现在，这一刻，23:58分距离寒假的正式开始还有两分钟我想开始吧奔跑吧带着洋溢的希望与深藏的幻想 能够在假期前一天和DIM愉快地在“味千拉面”交流这个学期的所得，与下个学期的展望……果然DIM太强啦，我太菜啦。所以这个假期要做的事情其实很简单：拥有前行的勇气做好该做的事情1、ACM算法竞赛2、下个学期的课程3、实验室的——大数据管理Point：集中精力学好英语 尝试的方法如下 慢于理解，沉着与痴迷 做纸面笔记，并且试着同步到Blog上（blog的意义参见“Byvoid的BAT面试报告”） 定好时间计划，尽力完成时间计划内的内容，留出时间，慢慢探索（凭着兴趣研究自己所学的东西） 学习新的学习方法 体验更新极限的快感 明天早上开始先大数据恶补计划而后等待学姐的通知由实验室的进度调整我关于其他两者的计划","categories":[{"name":"iPhreetom's world","slug":"iPhreetom-s-world","permalink":"http://iPhreetom.com/categories/iPhreetom-s-world/"}],"tags":[{"name":"开端","slug":"开端","permalink":"http://iPhreetom.com/tags/开端/"}]},{"title":"彼岸的生活","slug":"彼岸的生活","date":"2018-01-26T15:56:01.000Z","updated":"2018-01-30T07:09:05.221Z","comments":true,"path":"2018/01/26/彼岸的生活/","link":"","permalink":"http://iPhreetom.com/2018/01/26/彼岸的生活/","excerpt":"在搜索引擎下，如鱼得水","text":"在搜索引擎下，如鱼得水 在知乎听人们讲述Spark的起源与功能，享受其通俗易懂的比喻。在Baidu和google上寻觅教程，不断挑选与尝试。","categories":[{"name":"Bigdate","slug":"Bigdate","permalink":"http://iPhreetom.com/categories/Bigdate/"}],"tags":[{"name":"Bigdate","slug":"Bigdate","permalink":"http://iPhreetom.com/tags/Bigdate/"}]},{"title":"DAY6——树链剖分 -> 复习前面所学","slug":"DAY6——树链剖分——  0 复习前面所学","date":"2018-01-24T16:00:01.000Z","updated":"2018-01-26T16:22:04.996Z","comments":true,"path":"2018/01/25/DAY6——树链剖分——  0 复习前面所学/","link":"","permalink":"http://iPhreetom.com/2018/01/25/DAY6——树链剖分——  0 复习前面所学/","excerpt":"进入新世界","text":"进入新世界 醒来在清晨一早起来看到陈旸的twitter，ACM 数学 前端框架 画画（设计）如此畅快淋漓的生活我似乎也在争取拥有去用智慧和能力，以全新的姿态活在这个世界上《微习惯》中提到过一个新奇的思路：去思索一个事物的对立面，截然相反的一面。以此开拓你的思维比如：无所事事的一天，早上10点起床，开始看视屏，刷QQ空间，玩游戏，然后不吃饭，等到晚上，草草吃一顿，然后继续浪到深夜。它的对立面是：有着明确的目标，在早上6点起床（不允许自己熬夜刷，但是又要保证足够多的时间去学习），开始自己的计划，或者迫于生活的压力，或者因为梦中的美好开始学习，开始思考开始改变我的大学就是这样一种状态我知道世界上有很多很多我将来能够做到的事情，我想要得到它们让梦化为现实 流浪于午后昨日开始从头开始看《挑战算法程序设计竞赛》回头一看，发现自己真的是在学基础知识（ＢＦＳ，ＤＦＳ，ＤＰ）在今天早上和中午看到了ＤＰ后，突如其来的又一场，网络神游，却让我猛然惊醒如果说中午前，昨日的Ｂｙｖｏｉｄ的世界之旅还在我脑海回绕那么下午，Ｓｕｂｌｉｍｅ的自定义设置ＧＥＴ 和 ＡＣＭ的比赛需要使用Ｃｏｄｅｂｌｏｃｋ。这两件事情，引出了下午流浪的序幕。 Ｓｕｂｌｉｍｅ与世界简单的一步安装插件，获得边栏，todolist，汉化界面，编译环境设定，在知乎上和blog上，这一切唾手可得。通过知乎和blog去发现新世界的速度超乎我的想象，而在blog的寻找中突然又见到了Dimpurr的blog，由此开始怀疑人生…… ACMer对于这个比赛的理解似乎有了一点儿的提升区域赛world final在知乎上，ACMer分享着自己的体验由此，我能够一观比赛的实貌0、ACM的代码环境 —— Code block / Vim / Eclipse ， 以及，打印代码改错和检查1、队友的配合：分为 自己主写（爽快） 队友主写（自己负责，造数据和debug代码，参与思路分析，看题目）2、下一步 算法 - 例题 - 刷题（套题，题组）3、写blog，更新自己的想法，总结自己的所得4、拿到WF的名额，争取得到属于我的荣耀","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"学算法竞赛的方法","slug":"学算法竞赛的方法","permalink":"http://iPhreetom.com/tags/学算法竞赛的方法/"}]},{"title":"DAY5——算法学习指南","slug":"DAY5——算法学习指南","date":"2018-01-24T16:00:01.000Z","updated":"2018-01-25T08:55:34.806Z","comments":true,"path":"2018/01/25/DAY5——算法学习指南/","link":"","permalink":"http://iPhreetom.com/2018/01/25/DAY5——算法学习指南/","excerpt":"直观与抽象，思索与体悟","text":"直观与抽象，思索与体悟 主席树：线段树的可持久化 并查集：高效的元素分类 下面是经验积累 静态查错：把自己的代码重新审视一遍（尤其在抄模板的时候），检查变量是否正确、“=” 与 “＝＝” 数组开得够不够大 学习方案：现在我去把书中的基础知识、及模板扫一遍是最高效的事情如同拓扑序，学习算法也有其顺序","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"学算法竞赛的方法","slug":"学算法竞赛的方法","permalink":"http://iPhreetom.com/tags/学算法竞赛的方法/"}]},{"title":"Final","slug":"Final","date":"2018-01-23T14:32:53.000Z","updated":"2018-01-26T01:30:00.711Z","comments":true,"path":"2018/01/23/Final/","link":"","permalink":"http://iPhreetom.com/2018/01/23/Final/","excerpt":"为了自由的未来","text":"为了自由的未来 周五打团队赛我想要成为一个可靠的队友配合操作不想要垫底不想被落下 《挑战算法程序设计》感觉很棒，通过练习和自己的归纳，试着学习新的算法寒假策略就这样决定了推进《挑战算法程序设计》的进程","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"iphreetom's world","slug":"iphreetom-s-world","permalink":"http://iPhreetom.com/tags/iphreetom-s-world/"}]},{"title":"DAY4——数据结构基础","slug":"DAY4—— ~~树与树的分治~~","date":"2018-01-23T14:32:53.000Z","updated":"2018-01-25T08:55:34.022Z","comments":true,"path":"2018/01/23/DAY4—— ~~树与树的分治~~/","link":"","permalink":"http://iPhreetom.com/2018/01/23/DAY4—— ~~树与树的分治~~/","excerpt":"树的分治数据结构： 树、堆","text":"树的分治数据结构： 树、堆 树和二叉树 基础知识 利用数组建立二叉树 利用结构体建立二叉树 二叉树的三种历遍方式 优先队列和堆优先队列(#queue : proiority_queue)- 操作： - 能插入一个数值 - 取出最小（最大）的数值（取得并删除） - 实现： - 二叉堆实现法 二叉堆- 性质： - 儿子的值 一定大于等于 父亲的值 - 要求树的节点从上到下，从左到右顺序紧凑排列 - 操作： - 能插入一个数值 - 取出最小（最大）的数值（取得并删除） - 实现： - 利用数组表示二叉树 - 左儿子的编号 是 自己编号×2+1 - 右儿子的编号 是 自己编号×2+2 - 用途： - 实现优先队列： - 插入一个数值 - i = size++; - dad = (i-1)/2 - 不断向上提升，直到其父亲节点比它小为止 - if(heap[dad] &lt;= x )break - else heap[i] = heap[dad] ，i=dad //将父亲节点放下来，而插入值储实际存在变量x中 - 真正插入数组 - heap[i] = x - 取出最小值（实际上就是更新一次堆） - 用变量ret保存最小值 - 堆尾的值赋给根，并且用--size，表示删除 - 从根开始向下交换 - 比较儿子的值，贪心找小的一个 - 如果 儿子都 大于该值，就结束 - 否则把儿子提上来 - 返回ret 二叉搜索树- 性质 - 左子树的节点都比自己小 - 右子树的节点都比自己大 - 操作： - 插入一个数值 - 通过 询问（性质） 找到对应位置，插入 - 查询是否包含某个数值 - 删除某个数值 - 需要删除的节点没有左儿子，那么就把右儿子提上去 - 需要删除的节点的左儿子没有右儿子，呢么就把左儿子提上去 - 两种特列不满足，就把左儿子中最大的节点提到需要删除的节点上 - 实现： - 用结构体实现 二叉堆代码实现：1234567891011121314151617181920212223242526int heap[maxn],sz;void push(int x)&#123; int i = sz++; int p = (i-1)/2; while(i&gt;0)&#123; if(heap[p] &lt;= x)break; heap[i] = heap[p]; i = p; &#125; heap[i] = x;&#125;int pop()&#123; int ret = heap[0]; int x = heap[--sz]; int i = 0; while(i*2+1 &lt; sz)&#123; int a = i*2+1; int b = i*2+2; if(b&lt;sz &amp;&amp; heap[b] &lt; heap[a])a = b; if(heap[a] &lt; heap[i])heap[i] = heap[a] , i = a; else break; &#125; heap[i] = x;&#125; 对应习题：POJ 2431 ExpeditionPOJ 3253 Fence Repair 补习： 用O(n)求得 最小值和第二小值 mii1 和 mii2 使用priority_queue实现堆的方法，push(),pop(),top() 默认top(),pop()取出和删除最小值 取出最大值的方法：priority_queue&lt; int,vector&lt; int&gt;,greater&lt; int&gt; &gt; greater&lt;&gt; and less&lt;&gt;属于 #functional 题解：POJ 2431 Expedition移动方法：不断移动到一个新的加油站（把终点也当作一个加油站，简易计算）优先队列：当没有油时，加上队列中最大的油桶（取出最大值操作） POJ 3253 Fence Repair最小代价：取出最小的两个物件合并 树上的分治 点分治 选点的方法不同，导致每个点被历遍次数不同 选点的方法； 寻找“重心”：使得 最大值 最小 边分治 xxx","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"寒训","slug":"寒训","permalink":"http://iPhreetom.com/tags/寒训/"}]},{"title":"DAY3组合博弈","slug":"DAY3——博弈SG","date":"2018-01-23T14:32:53.000Z","updated":"2018-01-25T09:07:06.982Z","comments":true,"path":"2018/01/23/DAY3——博弈SG/","link":"","permalink":"http://iPhreetom.com/2018/01/23/DAY3——博弈SG/","excerpt":"组合博弈：","text":"组合博弈： 拿石子的游戏属于：NIM游戏这类游戏有以下结论· [ ] 通过异或和 状态Nim Nim和尾零为先手必败 Nim和不为零 先手必胜 [ ] Nim和 -&gt; SG函数 等价Nim数转换子博弈-难点求子博弈的nim数异或起来得到整个状态的等价 Nim数 [ ] ——Sprague-Grundy [ ] 无偏博弈： 完全信息 轮流行动，两名玩家 明确的规则 确定的状态和行动 在有限步中结束 [ ] 无偏博弈可以转换为Nim 先手必胜状态 解题思路 判断是否是无偏博弈（对于双方，最优解相同，象棋就不是） 没有结论打表找规律 两个结论 Nim函数 就是 棋子的数量 威佐夫博奕一堆随便拿或者两堆中一起拿同样多的个数 直接套公式和结论 第i个后手必胜的两堆数分别是： s（一个前面没有出现过的自然数） ， s+i 第k个 n = k * phi m = n + k; 奇异局势就是后手必胜 没有直观的策略就利用SG用N^2法去打表找规律打表，就是用暴力计算的模式，计算出前面的答案 D——经典用法 其他的现在不会，网上没有题解 今日计划 打表找规律 Nimp[ SG函数的写法 威尔夫博弈的写法 看挑战算法程序设计竞赛比看BLOG去入门，容易得多 题解A——ENimEN规则： 跟着拿，或者自由拿（后手的意义） B——Playing with stones在这道题上感觉到这道题超过我理解能力的地方很很多需要记录下自己的逻辑链 理解的方式其实只有一个慢下来慢到我们都能够理解我现在是一个愚蠢的家伙只好投入更多的时间试图理解，那些现在属于他与她的事物 PWS 打表 打表的定义 暴力算法算出前面的答案（数据多） 手算前面的答案（数据少，而且难） 观察SG函数，得到规律 SG函数定义 已知： SG函数 表示方法是 sg[i] SG函数值 是某堆的物件数 SG函数 源起 给定一个 有向无环图 和 一个起始位置顶点上的一枚棋子 ， 两名血手交替的对这枚棋子沿边进行移动，无法移动者判负。这个游戏，可以认为是所有impartial combinatorial games的抽象模型。 —— 百度百科 具体内容： 每个局面都看作一个顶点 定义mex函数 集合类型的函数，接受一个集合变量，返回一个集合变量 返回 最小的不属于这个集合的非负整数 sg[x] = mex(sg[x+1]) 对于所有terminal position所对应的顶点,其sg函数值定为0 则对于一个terminal position 的所有前驱都有sg函数值不为0, 对于一个sg函数值不为0的顶点，必定存在一个后继的顶点满足sg函数值为0 SG的意义 类比Nim游戏 Nim游戏 拿石子的游戏- 异或运算 转换成二进制后，进行（相异为1）（相同为0）的运算，得到新的结果 SG的代码实现：1234567891011121314151617181920212223242526272829303132//f[N]:可改变当前状态的方式，N为方式的种类，f[N]要在getSG之前先预处理//SG[]:0~n的SG函数值//S[]:为x后继状态的集合，// 后继状态 ： 剩下的石子数 算出的 SG函数值（最小石子数）// SG[x] ： 石子数为x时，所有 能到达的 后继状态（递归到结束）中没有出现过的// 意味着，如果状态不能够int f[N],SG[MAXN],S[MAXN];void getSG(int n)&#123; int i,j; memset(SG,0,sizeof(SG)); //因为SG[0]始终等于0，所以i从1开始 for(i = 1; i &lt;= n; i++)&#123; // 从1开始计算所有sg的值 //每一次都要将上一状态 的 后继集合 重置 memset(S,0,sizeof(S)); //S保存的是后继状态的函数值，之后要从这里找未出现的最小自然数 for(j = 0; f[j] &lt;= i &amp;&amp; j &lt;= N; j++) // 计算所有 后继状态,下标表示的就是 自然数（类似桶） S[ SG[i-f[j]] ] = true; //将后继状态的SG函数值进行标记 //当现有的i（石子数），减去使用不同方法后，后继状态 //i = 1时，可以取走1 - f&#123;1&#125;个石子，剩余&#123;0&#125;个，所以 SG[1] = mex&#123; SG[0] &#125;= mex&#123;0&#125; = 1; //当 SG[X] 为0时，说明取完，则为最终状态，S[1] = true //当 SG[x] for(j = 0;;j++) if(!S[j])&#123; //查询当前后继状态SG值中最小的非零值 SG[i] = j; // 历遍S，寻找最小的自然数 —— 如何求出所有出现过的自然数呢 break; &#125; &#125;&#125;","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"计算几何基础","slug":"计算几何基础","permalink":"http://iPhreetom.com/tags/计算几何基础/"}]},{"title":"DAY2 —— 计算几何基础","slug":"DAY2 —— 计算几何基础","date":"2018-01-22T14:32:53.000Z","updated":"2018-01-25T09:08:22.471Z","comments":true,"path":"2018/01/22/DAY2 —— 计算几何基础/","link":"","permalink":"http://iPhreetom.com/2018/01/22/DAY2 —— 计算几何基础/","excerpt":"计算几何 ：","text":"计算几何 ：本上挺简单的高中的解方程（解析几何）：精度不够的 几何意义：求点和直线的关系尽量通过向量求解 叉积 四边形的面积 —————— 面积为0说明点在直线上 点积 余弦值 —————— 小于0，说明点在线段间 叉乘的重要性质： 若 P × Q &gt; 0 , 则P 在Q的顺时针方向若 P × Q &lt; 0 , 则P 在Q的逆时针方向若 P × Q = 0 , 则P 与Q共线,但可能同向也可能反向 相交： 距离：点到直线的距离 求垂线 线段到线段的距离： 相交 最短值 位移： 旋转（虚数的几何意义）： 通过成cosx + i·sinx 凸多边形： 凸多边形的面积 逆时针枚举，算小三角形状 三角形重心 用面积加权求平均值 点是否在凸多边形内 由点向多边形端点 多边形交集 把多边形端点按x排序 由x来历遍 凹多边形： 简单的枚举，看交点个数，奇数则在里面 凸包： 给多个点，取出一些点，形成一个凸多边形 比赛常用的： 以x升序，y降序求字典序，得到左右端点 半平面交（金牌题）： D&amp;C S&amp;I 扫描线： 字典序+x历遍 旋转卡壳： Problems list：poj 1127poj 1218poj 2932","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"计算几何基础","slug":"计算几何基础","permalink":"http://iPhreetom.com/tags/计算几何基础/"}]},{"title":"DAY2计算几何","slug":"DAY2——计算几何","date":"2018-01-21T14:32:53.000Z","updated":"2018-01-25T08:59:34.930Z","comments":true,"path":"2018/01/21/DAY2——计算几何/","link":"","permalink":"http://iPhreetom.com/2018/01/21/DAY2——计算几何/","excerpt":"计算几何习题 ：","text":"计算几何习题 ： NULL今天开始愉快的抄模板，积累强大的武器吧。作为什么都不知道的萌新，突然从冷兵器时代，进入到了现代社会就是这样的感觉吧？（乡下人进村（笑针对几何图形的计算，建立在向量法的，基础运算库（模板） 基本运算： 加法，减法 比较运算 与常数的乘法 内积（以点为起点，以线段两个端点为终点作向量） 如果 小于 零说明在两点之间 如果 等于 零说成90°角 如果 大于 零说明在两点之外 外积（以点为起点，以线段两个端为点终点作向量） 常用判断： 两线段的交点坐标 点是否在线段上 A - Jack Straws桌上有着很多根吸管，并且由放置的顺序来确定每个吸管的编号给出每个习惯的两点坐标然后询问编号不同的两根吸管是否直接或间接相连 直观的想：先判断是否两根吸管直接相连如果不相连： 再从某根吸管开始历遍所有其他的吸管，如果有与它相连的吸管，则判断这根吸管是否与目标直接相连， （这里需要一个bool数组记录那些事已经相连过的） 直到所有吸管都历遍过了，输出NOT CONNNECTED B — Toys计算箱子中每个格子的玩具数量 现在拥有的工具判断点是否在线段或者直线上 点积 和 叉积 点积： 叉积： 如果等于零说明在两点确定的直线上 123456789101112131415/*问题：玩具在哪个格子里?简单思路：把点与左上角的点相连，作为线段L，通过计算L与格子分割线的交点的个数，得到点的位置 根据发杂度改进：用二分查找，寻找和L相交，最右边的分割线补习：二分法的实现：循环条件：r-l&gt;1左右位置: l = -1 ; r = n(不取)中点计算方式: mid = (l+1)/2移动方式: r = mid ; l = mid;答案位置： r*/","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"计算几何基础","slug":"计算几何基础","permalink":"http://iPhreetom.com/tags/计算几何基础/"}]},{"title":"DAY1——杂记","slug":"DAY 1——杂记","date":"2018-01-20T15:56:01.000Z","updated":"2018-01-30T06:44:15.933Z","comments":true,"path":"2018/01/20/DAY 1——杂记/","link":"","permalink":"http://iPhreetom.com/2018/01/20/DAY 1——杂记/","excerpt":"DAY1的杂记","text":"DAY1的杂记DAY 1 #思维： 跟着课中的内容理解新的信息的意义运用这种意义，去解决问题而后，看着别人的代码实现，试着具体理解 算法课的感觉： 基数排序： 一层一层的变换像神经网络 讲课方法：（理解方法） 朴素的方法，优化的方法 利用前面算过的内容 做题的方法 Height数组的意义 二分法 后缀数组前缀 区分： 在拥有了很多拥有“强意义”的数组后，利用这些信息简单寻找答案 C的写题有两种抽象方法，利用函数递归或者做什么，利用数组，不断的去堆叠信息 学习的梯度： 拥有的信息去匹配 题目 A题 poj bz bz 目的：不懂，不懂什么 算得sa，即后缀数组 学习内容字符串处理： 后缀数组：","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"杂记","slug":"杂记","permalink":"http://iPhreetom.com/tags/杂记/"}]},{"title":"DAY 1 后缀数组","slug":"DAY1——后缀数组","date":"2018-01-20T14:32:53.000Z","updated":"2018-01-21T00:28:30.432Z","comments":true,"path":"2018/01/20/DAY1——后缀数组/","link":"","permalink":"http://iPhreetom.com/2018/01/20/DAY1——后缀数组/","excerpt":"后缀数组：是处理字符串的基础算法。","text":"后缀数组：是处理字符串的基础算法。 变量含义 str ： 需要处理的字符串 suffix[i]： str中下标为i的后缀 rank[i] ： suffix[i]在所有后缀中的排名 sa[i] ： 排名为i的后缀 为suffix[sa[i]] , 与rank互为逆运算 因为rank和sa是互逆的，因而只需要求出rank，然后历遍一次转化成另一个求sa的方法有两种：倍增算法和DC3算法 倍增法求后缀数组思路：对每个字符开始的长度为2^k 的字符串求出排名，k从0开始，每次递增1，直到2^k 大于 len 时，所得到的序列就是rank，同时sa也就知道了运用基数排序，在线性时间内完成0","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"后缀数组","slug":"后缀数组","permalink":"http://iPhreetom.com/tags/后缀数组/"}]},{"title":"ACMer——动态规划","slug":"ACMer——动态规划","date":"2017-12-28T01:32:53.000Z","updated":"2018-01-20T15:48:34.012Z","comments":true,"path":"2017/12/28/ACMer——动态规划/","link":"","permalink":"http://iPhreetom.com/2017/12/28/ACMer——动态规划/","excerpt":"","text":"基础前置技能：1-递归2-二维数组 引论：在递归入门时，我们的都学过用简单递归写出一个斐波拉契数列的计算公式。 f(1) = 1;f(2) = 1;f(n) = f(n-1) + f(n-2); 但是这个算法的复杂非常高，近似于O(2^n),原因在于重复计算,要是我们能够记下已经 算出结果的f(m),那么再一次需要使用f(m)时，就不必在算一次了，那么用一个数组保存已算出的答案，并且区分","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"teach","slug":"teach","permalink":"http://iPhreetom.com/tags/teach/"}]},{"title":"CSS基础知识","slug":"CSS","date":"2017-12-19T16:00:00.000Z","updated":"2018-01-20T10:13:53.471Z","comments":true,"path":"2017/12/20/CSS/","link":"","permalink":"http://iPhreetom.com/2017/12/20/CSS/","excerpt":"了解CSS","text":"了解CSS 写法选择器 属性 值 选择器&nbsp;同时多个使用多个选择器 ：&nbsp;&nbsp;使用 “，”分隔&nbsp;派生选择器 ：&nbsp;&nbsp;子关系；&nbsp;&nbsp;单重（严格）子关系（&gt;）；&nbsp;&nbsp;兄弟关系(+);&nbsp;id&nbsp;&nbsp;# 作为标识符&nbsp;&nbsp;通常作为派生选择器 #itname p {}&nbsp;class&nbsp;&nbsp;. 作为标识符(.itname)&nbsp;&nbsp;可以用做派生选择 属性选择器&nbsp;title&nbsp;&nbsp;[title]&nbsp;&nbsp;[title = itname]&nbsp;&nbsp;[title ~= partname]&nbsp;&nbsp;在没有任何值的时候，对于所有含title的句子都渲染 css learnerWorking with Textfont&nbsp;font-family:&nbsp;&nbsp;type of font&nbsp;font-size:&nbsp;&nbsp;1em == 16px&nbsp;&nbsp;notice: try different combinations of font-size and page zooming&nbsp;font-style:&nbsp;&nbsp;italic（寻找是否该字体存在斜体）&nbsp;&nbsp;normal (such as using in “strong”)&nbsp;&nbsp;oblique (强制渲染成斜体)&nbsp;font-weight:&nbsp;&nbsp;bold&nbsp;&nbsp;bolder(感觉和bold没有区别)&nbsp;&nbsp;lighter&nbsp;&nbsp;number from 100 to 900&nbsp;font-variant:&nbsp;&nbsp;normal&nbsp;&nbsp;small-caps(奇妙的变化：首先让原来的大写字母突出放大，再让小写字母变成大写)&nbsp;&nbsp;inherit(继承父元素的值) color&nbsp;rgb（不会用）&nbsp;#0F(不会用×２)&nbsp;使用名字 text-align:&nbsp;left&nbsp;right&nbsp;center&nbsp;justify(实现两端对齐文本) vertical-align&nbsp;table-tr-td:&nbsp;&nbsp;top&nbsp;&nbsp;middle&nbsp;&nbsp;bottom&nbsp;in one line&nbsp;&nbsp;baseline&nbsp;&nbsp;sub&nbsp;&nbsp;super&nbsp;&nbsp;10px or -10px(px , pt , cm)&nbsp;div&nbsp;&nbsp;height&nbsp;&nbsp;width&nbsp;&nbsp;background-color&nbsp;&nbsp;inline-table&nbsp;&nbsp;div:&nbsp;&nbsp;&nbsp;table-cell&nbsp;&nbsp;&nbsp;vertical-align:middle or else text-decoration&nbsp;none&nbsp;inherit&nbsp;overline&nbsp;underline&nbsp;line-through text-indent&nbsp;60px also -60px&nbsp;inherit text-shadow&nbsp;Xpx Ypx blur(&gt;=0) color(or default same color) text-transform&nbsp;capitalize (首字母大写)&nbsp;uppercase&nbsp;lowercase letter-spacing&nbsp;normal&nbsp;length (can also be negative)&nbsp;inherit word-spacing&nbsp;normal&nbsp;length&nbsp;inherit white-space&nbsp;normal （不处理换行符，必要时换行，空格不缩减）&nbsp;inherit&nbsp;nowrap (禁止换行，缩减空格)&nbsp;pre-wrap (不处理换行符，必要时换行，缩减所有空格)&nbsp;pre-line （处理换行符，缩减空格）&nbsp;pre （处理换行符，空格不缩减） table&nbsp;property&nbsp;&nbsp;height&nbsp;&nbsp;width&nbsp;&nbsp;bolder: 1px solid blue;&nbsp;tr 行&nbsp;th , td 列&nbsp;&nbsp;th 自动加粗，td普通&nbsp;&nbsp;","categories":[{"name":"现代前端魔法","slug":"现代前端魔法","permalink":"http://iPhreetom.com/categories/现代前端魔法/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://iPhreetom.com/tags/CSS/"}]},{"title":"CODEVS-Gold贪心","slug":"vscode——gold","date":"2017-12-09T23:32:53.000Z","updated":"2018-01-30T07:05:53.679Z","comments":true,"path":"2017/12/10/vscode——gold/","link":"","permalink":"http://iPhreetom.com/2017/12/10/vscode——gold/","excerpt":"CODEVS-Gold贪心欢迎加入NOI之争","text":"CODEVS-Gold贪心欢迎加入NOI之争 #笔记 level 3贪心————&lt;均分纸牌&gt;贪心：在每种情况下都选择当前最优解。 &emsp;&emsp;对于本题，思想类似于：&lt;括号匹配&gt;，利用不断解决边界的当前子问题，来解决全部问题；&emsp;&emsp;类似于：&lt;……插入排序、冒泡排序……&gt;&emsp;&emsp;&emsp;&emsp;和它们相似的地方是都使用了一种思想：历遍数组时，历遍过的一段是“排序（分配）”好的。&emsp;&emsp;&emsp;&emsp; ————&lt;线段覆盖&gt;时间流失警示： 分析，不要莽撞的写题目。 当分析不出来的时候，查阅当前题型在《算法竞赛入门经典》中找到对应章节。 在使用贪心法解决问题时，我们总希望 数据是排序过的有着最大，最小等，表示极限的端点通过不断解决边界上的问题，最终解决整体问题。 本题通过把右边的边界排序后对左边界进行选择第一步最重要：我们选择排序后得到的第一个线段， （我们只需要确定第一个线段的右边界是最靠左的右边界，而第一个线段的左边界在哪里我们并不关心，因为它不会影响后续的抉择。）用一个变量贮存 右边界的值通过继续历遍左边界（+=2），判断是否现在的左边界大于等于储存的右边界。 如果大于等于，那么右边界 换做当前线段的右边界。 如果不是，“删除”当前线段。 高精度当然，就算是刚学会数组的人都可以实现一个高精度的加法。但是，想要让它能够像int类型一样的加减，我们需要用到struct的特性来实现它对……我们需要学习1、C++ 结构体的构造函数2、给结构体重载运算符","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"step-by-step","slug":"step-by-step","permalink":"http://iPhreetom.com/tags/step-by-step/"},{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/tags/ACM/"},{"name":"贪心","slug":"贪心","permalink":"http://iPhreetom.com/tags/贪心/"}]},{"title":"CODEVS-Silver","slug":"vscode","date":"2017-12-07T14:32:53.000Z","updated":"2018-01-30T07:05:50.594Z","comments":true,"path":"2017/12/07/vscode/","link":"","permalink":"http://iPhreetom.com/2017/12/07/vscode/","excerpt":"CODEVS-Silver踩坑指南欢迎加入NOI之争 闲聊：听闻了一个叫做codevs的网站，发现它对萌新很友善其中不得不提的一点是它会给你，测试失败的样例中样例的输入样例的输出你的输出woc……这简直……再也不用对着一道题的两个词Wrong answer（wa）浪费无数脑细胞妈妈再也不用担心我的学习 题目的按照类型分类一个一个题型攻略的快感容易让人上瘾呢让某人忍不住大吼“我热爱学习”……","text":"CODEVS-Silver踩坑指南欢迎加入NOI之争 闲聊：听闻了一个叫做codevs的网站，发现它对萌新很友善其中不得不提的一点是它会给你，测试失败的样例中样例的输入样例的输出你的输出woc……这简直……再也不用对着一道题的两个词Wrong answer（wa）浪费无数脑细胞妈妈再也不用担心我的学习 题目的按照类型分类一个一个题型攻略的快感容易让人上瘾呢让某人忍不住大吼“我热爱学习”…… #笔记 没有存在感的level 1：字符串处理单词反转&emsp;&emsp;关于STL的简单运用&emsp;&emsp;使用STL-stack（栈）&emsp;&emsp;使用pop(),push(),top()坑1：注意stack是用top返回可以提出的、顶部的值，而queue使用front()。 level 2:排序————&lt;随机数&gt;：理解：&emsp;&emsp;关于STL的简单运用&emsp;&emsp;set类型，和它的insert操作 坑1：set不支持下标运算坑2：set的迭代器生成方法：如果不能用auto，那么使用标准的迭代器生成方式 set&lt;int&gt;::iterator it; ————&emsp;&emsp;桶排序坑1：在数组和计数的地方都是用了n&emsp;计数定义为cn，数组为n&emsp;坑2：数组越界，循环条件多写一个0&emsp;使用define的方法，在头部写一个maxn 记录规模值；坑3：桶排序，输出的是i，而不是数组中的内容。 模拟————&lt;－cantor表&gt;&emsp;&emsp;好的，我们递推计算&emsp;&emsp;计算条件很复杂时，请使用人类易于理解的名词作为bool的变量名&emsp;&emsp; ————&lt;蛇行走位&gt;&emsp;&emsp;从起点开始认真打表&emsp;&emsp;举个例子规模为3 每一层都可以看作由三步拓展 第一步 右or左的顺序前进一格 第二步 上or下的顺序走len步 第三步 左or右的顺序走len步 len是当前构建的规模数-1 做题先找到中点位置， 坑1：审题中说了是奇数，所以不存在问偶数的特殊情况坑2：在宿舍写题目的效率or专注度远不如在自习室，在开发和写OJ时，请移步到自习室，等待电量低后，会宿舍，充电，写纸面作业，or看书（应该可以做到） 数论入门————&lt;素数判断&gt;&emsp;&emsp;从2到 根号n ，历遍求是否能够整除（用%的方法，比用double和int强制转化的方法好）&emsp;&emsp;输出时，注意用“\\”转义“\\”的规则&emsp;&emsp;&emsp;&emsp; ————&lt;最小公倍数和最大公约数&gt;求最小公倍数算法： 最小公倍数=两整数的乘积÷最大公约数 求最大公约数算法： 辗转相除法： 123456long long a=i,b=j,c; while(b!=0)&#123; c=a%b; a=b; b=c; &#125; 递推————&lt;数的计算&gt;&emsp;&emsp;暴力直接把思路穷举出来了&emsp;&emsp;感觉不满意&emsp;&emsp;简化思路，让它能够被自动递推&emsp;&emsp;用逻辑判断加循环（if，else，for）写出自己的框架&emsp;&emsp;然后实现自己的框架 对于新手，伪代码（思路）很重要 例子：&emsp;&emsp;当a[1] ————&lt;= a[0]/2时&emsp;&emsp;&emsp;&emsp;对于一个位置,在它被+=1后&emsp;&emsp;&emsp;&emsp;如果它小于等于 上一位的一半&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;count++;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;下一位清零;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;对下一位执行同样的操作//goto i++;//continue;&emsp;&emsp;&emsp;&emsp;否则，回调上一位//i–;(i-=2;continue;) 12345678910for(int i=1;a[1]————&lt;=a[0]/2;i++)&#123; if(++a[i]————&lt;=a[i-1]/2)&#123; count++; a[i+1]=0; continue; &#125; else&#123; i-=2; &#125; &#125; ————&emsp;&emsp;递推，用abc表示三个不断相互加和的数字，通过判断项数/3得到的余数，判断后输出abc中一个。&emsp;&emsp;（此方法需要调试，余数和输出关系的判断，是一个坑） 递归————&lt;二叉树的最大宽度和高度&gt;坑0:审视题目传达的意思（俗称审题） 逻辑，在看明白要干什么了，再动手做。 篇幅长的题目，逻辑链长的题目，可以使用辅助工具：纸或者电子设备 在作为新手写题目时，推荐要先 写解题思路、题目要求。 坑1：结构体使用 （1）结构体变量.成员名。如，stu.num。 （2）(*p).成员名。如，(*p).num。 （3）p-&gt;成员名。如，p-&gt;num。 坑2：函数 return后面的内容将不会被执行 12345678910//二叉树递归if(T-&gt;num == i) return T; else&#123; if(T-&gt;left!=NULL) return dfsfind(i,T-&gt;left); if(T-&gt;right!=NULL) return dfsfind(i,T-&gt;right); &#125;//教科书一般的经典错误，以为else中的return会在left调用完后被调用。 坑3：递归 理解递归的调用： void类型：在符合条件的时候，赋答案给全局变量 有返回值类型：在没有寻找到正确答案的时候： 如果不返回东西：编译器帮你返回一个不确定的值 上一个if终止条件可以是下一个if起始条件时，返回函数 返回 即是终结 123456789101112NODE *dfsfind(int i,NODE *T)&#123; if(T-&gt;num == i)&#123; return T; &#125; else&#123; if(T-&gt;left != NULL) if(dfsfind(i,T-&gt;left)!=NULL)return dfsfind(i,T-&gt;left); if(T-&gt;right != NULL) if(dfsfind(i,T-&gt;right)!=NULL)return dfsfind(i,T-&gt;right); &#125; return NULL;&#125; 坑4：初始化 不要信任编译器！ 不要信任编译器！ 不要信任编译器！ 这句话很重要 有些人告诉我们：定义在全局变量区域的int变量，int数组会被初始化全部为0，有些人告诉我们：int a[10]={0};可以把a中的变量全部初始化为0； 有人…… 是，没错，在绝大多数情况下，这些事情都没错 但是，有时候，编译器抽风了，和你说，它就是没有被初始化…… 如果你想要搞明白在怎么回事： --&gt; baidu，google --&gt; 学会汇编，多看文档 坑5（编译器察觉）：顺序 结构体下面才能够使用结构体去，定义函数，定义变量 坑6：大幅改写 突然发现一个功能需要被重复多次，试着改写把某一大部分改写成一个函数 变量的作用域（相互关联）容易搞错 极力不推荐把主函数的某部分突然改写成一个函数结构 耗费大量时间 但是一开始全部使用全局变量 之后就可以随便写void函数啦 （ACM经验之谈） 坑7：引用 代码的核心是： new NODE();需要使用指针 NODE{...NODE *left;...} 引用与这两个核心是不兼容的 ————&lt;简单递归&gt;&emsp;&emsp;emmmmm，这个很简单的啦。&emsp;&emsp;规定 结束条件&emsp;&emsp;其他情况 返回自身&emsp;&emsp; ————&emsp;&emsp;递归理解： …… return f(); 相当于把f()的返回值 拿来当作自己的返回值。 所以最深处的返回值就是真实的返回值可以把它比作一条笔直的递归链（形象的词，不准确），从尾返回到头 ……return f(---) + f(---) 则是把两个函数的值合起来当作自己的返回值：可以把它比作 一个从顶点向下拓展的三角形先把建造整个三角形，然后从最下一层开始向上收缩。（思考一下：是否存在重复计算） ————&lt;二叉树的先中后历遍&gt;&emsp;&emsp;二叉树的基本操作&emsp;&emsp;坑1： struct A的构造函数写作 A(参数，参数):ver(值)....{} ; 参数：可以为空 值： 空 参数 默认常量（数值，NULL，字符） 使用时： A = new A(参数，参数); 相当于调用了构造函数 构造函数在定义 n维向量的点时，相当形象 EX: p(x,y,z); 函数后就该跟着一个{}，因为构造函数没有实际内容，这个括号容易被遗漏 ————&lt;罗汉塔&gt;罗汉塔，要把所有需要用到的变量赋予意义，。1void move(int num,char from,char by,char to) 简而言之： void在理解递归时更加方便，递归时，不用再去纠结返回什么值，而是直接思考递归本身，用人类的思维理解。 进制转换水题两道&emsp;&emsp;方法：&emsp;&emsp;char 和 int 的转换&emsp;&emsp;&emsp;&emsp;1&gt; (‘a’ &lt;= c &amp;&amp; c &gt;= ‘z’)&emsp;&emsp;&emsp;&emsp;2&gt; (num = c - ‘0’) 或者 (num = c - ‘A’)","categories":[{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/categories/ACM/"}],"tags":[{"name":"step-by-step","slug":"step-by-step","permalink":"http://iPhreetom.com/tags/step-by-step/"},{"name":"ACM","slug":"ACM","permalink":"http://iPhreetom.com/tags/ACM/"},{"name":"递归","slug":"递归","permalink":"http://iPhreetom.com/tags/递归/"},{"name":"数论","slug":"数论","permalink":"http://iPhreetom.com/tags/数论/"},{"name":"汉诺塔","slug":"汉诺塔","permalink":"http://iPhreetom.com/tags/汉诺塔/"},{"name":"二叉树","slug":"二叉树","permalink":"http://iPhreetom.com/tags/二叉树/"},{"name":"搜索","slug":"搜索","permalink":"http://iPhreetom.com/tags/搜索/"},{"name":"结构体","slug":"结构体","permalink":"http://iPhreetom.com/tags/结构体/"},{"name":"STL","slug":"STL","permalink":"http://iPhreetom.com/tags/STL/"},{"name":"模拟","slug":"模拟","permalink":"http://iPhreetom.com/tags/模拟/"}]},{"title":"萌新的blog之旅","slug":"萌新的blog之旅","date":"2017-11-29T15:22:53.000Z","updated":"2018-01-28T02:31:15.246Z","comments":true,"path":"2017/11/29/萌新的blog之旅/","link":"","permalink":"http://iPhreetom.com/2017/11/29/萌新的blog之旅/","excerpt":"作为什么都不懂的蒟蒻萌新来到了广阔的大学 成日在和自己的无知作斗争 某日 被一只沉溺DOTA2的fi15安利一个叫做hexo+github一天建成blog的神奇方法，于是就愉快的跳进了这个史前巨坑，对，他有句话说对了，首先……你得找对教程。","text":"作为什么都不懂的蒟蒻萌新来到了广阔的大学 成日在和自己的无知作斗争 某日 被一只沉溺DOTA2的fi15安利一个叫做hexo+github一天建成blog的神奇方法，于是就愉快的跳进了这个史前巨坑，对，他有句话说对了，首先……你得找对教程。 ##总结： 首先是下载两个软件（node.js 和 git) 安装hexo 建立模板 —-预览—- 第一步完成 为了炫耀的效果更佳 更换主题，配置一堆东西 写自己的文章 –在浏览器里继续独自观看—- 第二步完成 然后为了能向别人展示 先注册github，创建一个项目 在本地使用git 把东西拷贝进 io里 使用手动提交 —在浏览器中访问自己的网站—- 第三步完成 是时候秀一波操作了 “请开始你们的表演” “第四步？不存在的” ###首先是下载两个软件 1· git 2· node.js 下载后 先打开 node.js 的命令行（Node.js command prompt) 接着输入 咒语： npm install hexo-cli -g 等待自动安装（第一次看到在命令行安装软件，某人兴奋地在宿舍乱叫） （npm : 一个叫做 npm 的神奇新世界，是你安装的node.js中的一个“软件下载更新卸载的管理器”，从此下载软件就是一行命令 install ： install = 安装 git ： 需要的软件） （可能有一天我们可以使用这个来一句 npm install LOL ，好吧……不存在的） （输入 hexo -v 可以查看 hexo 的版本，检查是否安装成功 “v” version 版本） 我们接下来看着这个闪烁的光标 …… 该怎么做呢 接着我们需要创建一个放Blog的地方， 咒语： mkdir 新建文件夹的名字 （例如 mkdir iPhreetom) （mkdir = 命令行中的 新建文件夹 命令） 接着应该可以在桌面看到一个新文件夹了吧 咒语 cd 文件夹的名字 （例如 cd iPhreetom) （cd = 命令行中 移动到某一个文件夹） （ 补充：如果想要退后，有两个方法 咒语： cd .. （返回上一层） 咒语： cd （返回桌面） ） 到达blog的文件夹后，使用 咒语 hexo init （这就是传说中的 一键搭站 几秒钟初始化了一个模板） 接着 咒语： npm install （这大概是在帮你安装一些组件，没看懂） 我们预先体验一下自己做出一个网站的快感吧 咒语： hexo -g （hexo ： 我们第一个安装的那个 “hexo-cli”的软件，也就是它负责做出了整个网页，以后的大多数操作，就是要使用它来完成） （ -g： g = generate = 生成 ， 生成一个本地页面的数据，一会提供我们预览） 咒语： hexo -s （ -s ： s = server ，由刚刚generate 生成的数据，产生一个可以访问的网页——） 复制 或者 手动输入 这个网址 （某人在深夜看到这个页面感动不已……f15 还我周末！） -待续……","categories":[{"name":"iPhreetom's world","slug":"iPhreetom-s-world","permalink":"http://iPhreetom.com/categories/iPhreetom-s-world/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://iPhreetom.com/tags/blog/"}]},{"title":"《如何阅读一本书》","slug":"《如何阅读一本书》","date":"2017-11-28T22:32:53.000Z","updated":"2018-01-28T02:31:25.247Z","comments":true,"path":"2017/11/29/《如何阅读一本书》/","link":"","permalink":"http://iPhreetom.com/2017/11/29/《如何阅读一本书》/","excerpt":"亚马逊评论：一本实用类的书籍应该要说明白两件事说服你去做告诉你怎么做 目的：&emsp;&emsp;提高自己在阅读中获得可利用知识的效率（更快的获得有用的信息）&emsp;&emsp;提高自己判断内容是否有益的能力（在阅读后，得出自己的结论）&emsp;&emsp;学会阅读教科书来应对大学考试（在面对一本厚书时，如何学习它）&emsp;&emsp;培养自己的目的性，在无数抉择后，得到自己渴望的宝物。&emsp;&emsp;重新构建“交流”这一个概念","text":"亚马逊评论：一本实用类的书籍应该要说明白两件事说服你去做告诉你怎么做 目的：&emsp;&emsp;提高自己在阅读中获得可利用知识的效率（更快的获得有用的信息）&emsp;&emsp;提高自己判断内容是否有益的能力（在阅读后，得出自己的结论）&emsp;&emsp;学会阅读教科书来应对大学考试（在面对一本厚书时，如何学习它）&emsp;&emsp;培养自己的目的性，在无数抉择后，得到自己渴望的宝物。&emsp;&emsp;重新构建“交流”这一个概念 阅读的层次第一层：基础阅读 第二层：检视阅读 第三层：分析阅读 第四层：主题阅读 &emsp;&emsp;基础阅读：这个句子在说什么，像似读外国文字，要从认识一个个字，到试着整体理解。&emsp;&emsp;检视阅读：这本书在讲什么，“这本书的结构如何？”，“这本书包含哪些部分？”，不论时间多短，你都可以回答“这是哪一类的书——小说、历史、还是科学论文？”&emsp;&emsp;分析阅读：完整的阅读，接住作者投出的每一个球。同时，对自己所读的东西，提出系统性的问题（套路、模板、方法）&emsp;&emsp;主题阅读：比较，构造框架，发现缺漏。 阅读的活力与艺术定义：阅读为 一种积极主动的状态。 &emsp;&emsp;积极主动和跃跃欲试是同样的意义，对于文字敏感，不断反驳、思考、联想、总结。 意义：主动的多少，决定了阅读的效率。通过主动，提升搜索的能力 &emsp;&emsp;主动寻找的定义：搜索能力。 比喻：投球者与捕手，专递信息和接受信息 &emsp;&emsp;有些作者完全知道如何控球，他们完全知道自己要传达的是什么，同时也准确无误的传达出去了。&emsp;&emsp;知道自己想要表达什么，并且准确无误的表达出去 基础阅读&emsp;&emsp;作者生于一个对阅读有着狂热研究的时代&emsp;&emsp;构造这个时代的是几种历史趋势：&emsp;&emsp;1、美国继续推行全民教育，教育的两级化愈加严重&emsp;&emsp;2、阅读教育本身发生了变化&emsp;&emsp;&emsp;&emsp;a、ABC教学法：从字母到音节，不管这样拼出来的单词是否有意义，此法受到了严厉批评，于是发展成为下两种方法。&emsp;&emsp;&emsp;&emsp;b、发音法，从单词到字母&emsp;&emsp;&emsp;&emsp;c、默读法，&emsp;&emsp;这些内容比较适合在思考未来对孩子的教育 和 学习外语时去总结&emsp;&emsp;现在略过去&emsp;&emsp; 检视阅读检视阅读包含了什么？ 要如何培养检视阅读的能力？ &emsp;&emsp;检视阅读有两种，本质是一体两面，但是新手最好把它分为两种不同的步骤，两种不同的活动。&emsp;&emsp; 自我要求的读者&emsp;&emsp;读一本书，要根据文章的进行，提出适当的问题&emsp;&emsp;1、这本书的主题是什么？&emsp;&emsp;2、作者在细节中讲了什么，怎么说的？&emsp;&emsp;3、这本书说得有道理么？全部，还是部分？&emsp;&emsp;4、这本书跟我有什么关系？资讯的意义，若是给予启发，那么去找到它给予的建议，以获得更多的启示。&emsp;&emsp;如何能够从书中获得最多的启示（纠正）：（真正拥有一本书！）&emsp;&emsp;电脑前的问题可以成为清晰的讯号： &emsp;&emsp;读书做笔记：划线，提问题，&emsp;&emsp;论点的顺序标注&emsp;&emsp;全文的重点架构&emsp;&emsp;整体构架 是在怎么样的，作者借着这个构架如何发展他的观点或者论述他的主题？&emsp;&emsp;&emsp;&emsp;分析阅读的时候，做概念笔记，概念是作者的观点，而随着你对这本书的深度和广度提高后，自己的观点也将会记录在笔记里&emsp;&emsp;&emsp;&emsp;概念笔记和结构笔记是截然不同的&emsp;&emsp;在做主题阅读时，应该就是拥有概念笔记，论点，论题下 标注的不仅仅再是本书的页码，同时也会有其他书的页码&emsp;&emsp;","categories":[{"name":"iPhreetom's world","slug":"iPhreetom-s-world","permalink":"http://iPhreetom.com/categories/iPhreetom-s-world/"}],"tags":[{"name":"think","slug":"think","permalink":"http://iPhreetom.com/tags/think/"},{"name":"reading","slug":"reading","permalink":"http://iPhreetom.com/tags/reading/"},{"name":"step-by-step","slug":"step-by-step","permalink":"http://iPhreetom.com/tags/step-by-step/"}]}]}